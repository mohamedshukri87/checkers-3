

// piece gets most of move functionality, and move takes care of pre and post positions and feeds it into the game
// player and opponent gets to choose where the piece is going. // inherited from the player engine


// Piece Controller - manages piece turn, moves the piece,
// Player-engine (making move)





// RESEARCH COMPOSITION



// right now, the board has selected piece status, kma

// game engine  has a piece controller which modified if king or not, and game engine also has a player engine which makes the move.


// SORT OUT THE CLASS MODELS:

class BoardController { 
    constructor(board) {
      this.board = board;
    }
    
    getBlackPiecesMatrix() {
      return this.board.getBlackPiecesMatrix();
     
    }
    
    
    setSelectedPiece(){
      this.board.selectedPiece = selectedPiece;
    }
  
    getSelectedPiece(){
      return this.board.selectedPiece;
    }
  
    setColourMetaData(colourMetaData){
      this.board.coloursMetaData = colourMetaData;
    }
    getColourMetaData(){
      return this.board.coloursMetaData;
    }
  
    getSpecifiedPiece(selectedPiece){ // fix this
  
      console.log(selectedPiece)
    }
  
      
    
  
    getSelectedSquare(row, column){
      return document.getElementById(row, column) // might not work if no checkticks
    }
    // no use to me now
    checkPiecePlaceRequiements( xCoordinate, yCoordinate){
      if (document.getElementById(`${xCoordinate}${yCoordinate}`) instanceof Node) {
        if (this.getBlackPiecesMatrix()[xCoordinate][yCoordinate] === 1 || this.getWhitePiecesMatrix()[xCoordinate][yCoordinate] === 1) {
          return true;
        }
    }
  }
    
    // board has a player engine? no.
  
    checkPieceAvailability(i,j){
  
  
      if(this.board.getBlackPiecesMatrix()[i][j] === 1 || this.board.getWhitePiecesMatrix()[i][j] === 1) {
          return true
          }
        }
      
      }
  
  
  
  
  
  
  
   class Game {
    constructor() {
      this.board = this.initialiseGame(); 
      this.currentPlayer = 'white'; 
      this.boardController = new BoardController(this.board);
      this.gameEngine = new gameEngine(this.boardController);
      this.gameEngine.initialisePiece();
  
      
    }
  
    initialiseGame() {
      let properBoard = new Board(8, 8, this);
      properBoard.setMatrix();
      properBoard.buildGrid();
      
      return properBoard;
    }
  
  
  }
  class Square {
    constructor(rows, columns, whitematrix, blackmatrix, squares, matrix, board) {
      this.rows = rows;
      this.columns = columns;
      this.squares = [];
      this.board = document.getElementById("board");
      this.whitematrix = whitematrix;
      this.blackmatrix = blackmatrix;
      this.matrix = matrix;
      this.boardInstance = board;
  
      for (let i = 0; i < rows * columns; i++) {
        this.squares.push({
          colour: this.setPieceColour(i % columns, Math.floor(i / columns)),
        });
      }
    }
  
    setPieceColour(x, y) {
      return ((x + y) % 2 === 0) ? "rgb(71, 52, 38)" : "rgb(178, 152, 123)";
    }
  
    buildCell(i, j) {
      return this.squares[i * this.columns + j].colour;
    }
  }
  
  
  
  
  class Board {
    #blackPiecesMatrix;
    #whitePiecesMatrix;
  
    constructor(rows, columns) {
      this.rows = rows;
      this.columns = columns;
      this.matrix = [];
      this.selectedPiece = null;
      this.currentPlayer = 'white'; 
  
      // Initialize matrices
      this.#blackPiecesMatrix = this.addPieceToMatrix('black');
      this.#whitePiecesMatrix = this.addPieceToMatrix('white');
      this.boardController = new BoardController(this);
    
  
      this.coloursMetaData = this.initialiseColoursMetaData();
      this.square = new Square(this.rows, this.columns, this.getWhitePiecesMatrix(), this.getBlackPiecesMatrix(), this.squares, this.matrix, this);
    }
  
    setBlackPiecesMatrix(matrix) {
      this.#blackPiecesMatrix = matrix;
    }
  
    setWhitePiecesMatrix(matrix) {
      this.#whitePiecesMatrix = matrix;
    }
  
    getBlackPiecesMatrix() {
      return this.#blackPiecesMatrix;
    }
  
    getWhitePiecesMatrix() {
      return this.#whitePiecesMatrix;
    }
  
    
  
    setMatrix() {
      this.matrix = new Array(this.rows).fill(0).map(() => new Array(this.columns).fill(0));
    
      const blackMatrix = this.getBlackPiecesMatrix();
      const whiteMatrix = this.getWhitePiecesMatrix();
    
      if (blackMatrix && whiteMatrix) {
        for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
            if (blackMatrix[i][j] === 1 || whiteMatrix[i][j] === 1) {
              this.matrix[i][j] = 1;
            }
          }
        }
      }
    
      return this.matrix;
    }
    
  
    initialiseColoursMetaData() {
      const pieceColours = ["black", "white"]; // perhaps use database
      const coloursInfo = {
        black: { start: 0, oppositeEdge: this.rows-1 },
        white: { start: this.rows - 3, oppositeEdge: 0 }
      };
      
      return pieceColours.map(colour => ({
        colour,
        start: coloursInfo[colour].start,
        oppositeEdge: coloursInfo[colour].oppositeEdge
      
      
      
    }));
  
    
  }
  
  
    addPieceToMatrix(colour) {
        
  
      
      
      const matrix = {
        matrix: Array(this.rows).fill(0).map(() => Array(this.columns).fill(0)),
        alternatingArray: Array.from({ length: this.columns }, (_, i) => i % 2),
        flipbits: arr => arr.map(b => (1 - b)),
      }
      
      let x; // switch 
      switch (colour) {
        case "black":
       
          x = this.initialiseColoursMetaData()[0].start;
          break;
        case "white":
          x = this.initialiseColoursMetaData()[1].start;
          matrix.alternatingArray = matrix.flipbits(matrix.alternatingArray);
          break;
        default:
          return matrix.matrix;
      }
      switch (colour) {
        case "black":
          for (let i = x; i < x + 3; i++) {
            matrix.matrix[i] = (i % 2 === 0) ? matrix.alternatingArray : matrix.flipbits(matrix.alternatingArray);
          }
          break;
        case "white":
          for (let i = x; i < x + 3; i++) {
            matrix.matrix[i] = (i % 2 === 0) ? matrix.flipbits(matrix.alternatingArray) : matrix.alternatingArray;
          }
          break;
      }
  
      return matrix.matrix;
    }
  
    buildGrid() {
      this.setMatrix(); // Ensure matrix is set here
    
  
      for (let i = 0; i < this.rows; i++) {
        this.buildBoard(i);
      }
  
    }
  
    buildBoard(i) { /// actually building the board.
      const cellContainer = document.createElement("div");
      cellContainer.className = "cellContainer";
  
      for (let j = 0; j < this.columns; j++) {
        
  
          const cell = document.createElement("div");
          cell.className = "cell";
          cell.style.backgroundColor = this.square.buildCell(i, j);
          cell.id = `${i}${j}`;
          
          cellContainer.appendChild(cell);
          this.boardController.checkPieceAvailability(i,j);
      }
      
      document.getElementById("board").appendChild(cellContainer);
  
      
  }
  
            
        
    }
        
  
  
  
  
  // calls piece controller 
  
   
  class gameEngine { // a game has a game engine : determines which pieces are kings and which are not.Turn Management: Win conditions
    // initialise pieceController in this class.
    constructor(boardControllerInstance) {
      //this.boardController = new boardController(board);
      //this.selectedPiece = selectedPiec
      this.boardControllerInstance = boardControllerInstance
      this.player1 = new Player();
      this.opponent = new Opponent();
      this.playerEngine = new PlayerEngine(this);
      this.pieceColour = ["white", "black"];
      this.selectedPiece = this.boardControllerInstance.getSelectedPiece();
      this.currentPlayer = "white";
      this.whitePiecesLeft = 12;
      this.blackPiecesLeft = 12;
      // ({this.selectedPieceCoordinateX, this.selectedPieceCoordinateY} = this.getCoordinates(this.selectedPiece)); fix this
    } // selectedpiece controller
  
  
    setTurn(){
      return;
    }
  
    decrementWhitePieces(){
      this.whitePiecesLeft--;
    }
  
    decrementBlackPieces(){
      this.blackPiecesLeft--;
    }
  
    getNumberOfWhitePieces(){
      return this.whitePiecesLeft
    }
  
    getNumberOfBlackPieces(){
      return this.blackPiecesLeft
    }
  
    getSelectedPiece(){
     return;
    }
  
    getPieceColour(){
      return this.pieceColour
    }
  
    checkKing(selectedPiece) {
      const board = this.boardControllerInstance.board;
      // Log the selectedPiece to see its value
      if (selectedPiece) {
        console.log(selectedPiece.style.backgroundColor);
        const row = selectedPiece.dataset.row;
        const col = selectedPiece.dataset.col;
        if (selectedPiece.style.backgroundColor == this.boardControllerInstance.getColourMetaData()[0].colour && row == this.boardControllerInstance.getColourMetaData()[0].oppositeEdge
      
          || selectedPiece.style.backgroundColor == this.boardControllerInstance.getColourMetaData()[1].colour && row == this.boardControllerInstance.getColourMetaData()[1].oppositeEdge){
     
            selectedPiece.remove();
            const kingPiece = new KingPiece(
              board.getWhitePiecesMatrix(),
              board.getBlackPiecesMatrix(),
              board.matrix,
              board,
              board.square,
              row, col,
              this 
            );
            const kingElement = kingPiece.constructPiece(row, col);
            const cell = document.getElementById(`${row}${col}`);
            if (cell) {
              cell.appendChild(kingElement);
              kingPiece.setPieceAttributes(kingElement, row, col);
              
            }
            kingElement.appendChild(kingPiece.turnToKingPiece(kingElement));

            

            console.log("Piece is a king")
  
  
          }
        else{
          console.log("Not King")
        }
    } else {
      console.error('selectedPiece is undefined');
    }
      return false;
    }    
      
    
    
  
    switchPlayer() {
      this.currentPlayer = this.currentPlayer === 'white' ? 'black' : 'white';
    }
  
    getCurrentPlayer() {
      return this.currentPlayer;
    }
  
    checkTurn(pieceColour) {
      return pieceColour === this.getCurrentPlayer();
  
    }
  
    gameOver(){
      if(this.getNumberOfWhitePieces() === 0 || this.getNumberOfBlackPieces() === 0){
        console.log("Game Over");
        return true;
      }; // add to see if there is blockages
    }
  
  
  
    
      
    initialisePiece() {
      const board = this.boardControllerInstance.board;
        if(!this.checkKing()){
        for (let i = 0; i < board.rows; i++) {
          for (let j = 0; j < board.columns; j++) {
            if (this.boardControllerInstance.checkPieceAvailability(i, j)) {
              let piece = new Piece(
                board.getWhitePiecesMatrix(),
                board.getBlackPiecesMatrix(),
                board.matrix,
                board,
                board.square,
                i,j,
                this // is game engine really connected to piece?
              );
              const pieceElement = piece.constructPiece(i, j);
              const cell = document.getElementById(`${i}${j}`);
              if (cell) {
                cell.appendChild(pieceElement);
                piece.setPieceAttributes(pieceElement, i, j);
  
  
                //pieceElement.addEventListener('click', (event) => this.playerEngine.handlePieceSelection(event, pieceElement));
              }
           }
         }
        }
  
  
        }
    
      
    }
  
    // bug: you cant change your mind about piece selection
  
    handleGameClick(event, piece) {
  
   
      if (this.checkTurn(piece.style.backgroundColor) && !this.gameOver()) {
        const [boolean, selectedPiece] = this.playerEngine.makeMove(null, piece, this.boardControllerInstance);
        if (boolean) {
          this.displayMove(selectedPiece);
          this.switchPlayer()
        }
      } else {
        
        
      }
    }
    
      
  
  
    
  
    displayMove(selectedPiece){
      console.log("Selected piece is a ", selectedPiece.className)  
      let moveOption = new PieceController(selectedPiece, this.boardControllerInstance.board, this);
      moveOption.generateMove();
      
    }
  
    
    
  
      ///
    
    handleKingTransition(row, column, piece){
      
        // remove current piece at location.
        // call king class
        // construct king piece by its method
        
        //if(piece){
          //this.boardController.getSelectedSquare().removeChild(piece);
          //const king = new King() // also add piece here perhaps
        //}
  
      }
    
      // check if the king is on the opposite side of the matrix and change it into a king piece.
  
  }
    
  
  class Piece {
    constructor(parentMatrix1, parentMatrix2, matrix, board, square, x, y, gameEngineInstance) {
      this.parentMatrix1 = parentMatrix1;
      this.parentMatrix2 = parentMatrix2;
      this.matrix = matrix;
      this.boardInstance = board;
      this.squareInstance = square;
      this.operand = null;
      this.x = x;
      this.y = y;
      //this.piece = piece
      this.isKing = false;
      this.pieceColour = this.getColour(this.x,this.y);
      this.gameEngineInstance = gameEngineInstance;
      this.state = "pieces"
   
  
    }
  
   
  
    getCoordinates(x, y){
      return {x,y}
  
    }
  
    
    
  
    constructPiece(i,j) {
      const piece = document.createElement("div");
      
      [i].forEach(myNumber => {
        let formattedI = myNumber.toLocaleString('en-UK', {
          minimumIntegerDigits: 2,
          useGrouping: false
        })
        piece.id =`${formattedI}${j}` 
  
      })
      return piece;
    }
  
    getColour(i, j) {
     return (this.parentMatrix1[i][j] == 1) ? "white" : "black";
     
    }
  
    setPieceAttributes(piece, i, j) {
      piece.style.backgroundColor = this.pieceColour
      
      piece.className = this.state;
      piece.classList.add(this.state);
      piece.setAttribute("data-row", i);
      piece.setAttribute("data-col", j);
      piece.addEventListener('click', (event) => this.gameEngineInstance.handleGameClick(event, piece) ,{ once: false });
    }
  
    
    //simulateClick(piece) {
      //const event = new MouseEvent('click', {
        //bubbles: true,
        //cancelable: true,
        //view: window
      //});
      //piece.dispatchEvent(event);
    //}
  
    
  
  
    
  
    unToggleHighlight() {
      document.querySelectorAll('.legalMove').forEach(cell => {
        cell.style.backgroundColor = "rgb(178, 152, 123)";
        cell.classList.remove('legalMove');
      });
    }
  
  
  
  
  
  
  
  
  }
  
  
  
  
  
  
  // make consideration about moving in king class.
  
  class KingPiece extends Piece {
    constructor(parentMatrix1, parentMatrix2, matrix, board, square, x, y, gameEngineInstance) {
      super(parentMatrix1, parentMatrix2, matrix, board, square, x, y, gameEngineInstance);
      this.isKing = true;
      this.numberOfKingPieces = 0;
      this.shiftType = 1
      this.state = "king"


  
  
    }
  
  
    
    setPieceAttributes(piece, i, j) {
      piece.style.backgroundColor = piece.style.backgroundColor;
      piece.classList.add('king');
      piece.setAttribute("data-row", i);
      piece.setAttribute("data-col", j);
      piece.className = "pieces"
      piece.addEventListener('click', (event) => this.gameEngineInstance.handleGameClick(event, piece) );
      

  
    }
  
    turnToKingPiece(piece) {
      const kingImage = document.createElement("img");
      kingImage.src = (piece.style.backgroundColor == "black") ? 'whiteCrown1.png' : 'blackCrown1.png';
      kingImage.style.height = "5px"
      kingImage.alt ="KING"

      return kingImage;
        
    }
  
  
  }
  
  
  
  class PlayerEngine{ // interface class
    constructor(gameEngineInstance){
      //this.selectedPiece = selectedPiece;
      this.gameEngineInstance = gameEngineInstance;
  
    }
  
    // get based on piece and its i                                                                                                                                                                              if(piece.style.backgroundColor == this.board.currentPlayer && (!this.board.selectedPiece)){
      
   handlePieceSelection(event, pieceElement, boardController) {
    
    const row = parseInt(pieceElement.getAttribute('data-row'));
    const col = parseInt(pieceElement.getAttribute('data-col'));
    boardController.board.selectedPiece = pieceElement;
    this.startMoving(pieceElement, boardController);
  }
  
  
    startMoving(piece, boardController){
      let moveOption = new PieceController(piece, boardController.board, this.gameEngineInstance);
      moveOption.generateMove();
    }
  
    makeMove(event, piece, boardController){
      let board = boardController.board;
      const { selectedPiece } = board // this.boardInstance
    
      // calculate selected piece in player class ? idea
  
  
      if (selectedPiece && selectedPiece !== piece) {
        //this.unToggleHighlight();
        return;
      }
  
      if (piece === selectedPiece) {
  
        board.selectedPiece = null;
      } else {
        board.selectedPiece = piece;
  
      return [true, board.selectedPiece];  
      
    }}
  }
    
  
  
  
  class Player extends PlayerEngine {
    constructor(gameEngineInstance) {
      super(gameEngineInstance);
  
      this.pieceColour = null;
      
    }
  
    setPieceColour(colour){
      this.pieceColour = colour; 
    }
  
    getPieceColour(){
      return this.pieceColour;
  
    }
  
    handleCellClick(){
      return;
    }
  
    makeMove(){
      return;
    }
  
  }
  
  class Opponent extends PlayerEngine {
    constructor(gameEngineInstance) {
      super(gameEngineInstance);
      this.pieceColour = null;
  
    }
  
    setPieceColour(colour){
      this.pieceColour = colour;
    }
  
    getPieceColour(){
      return this.pieceColour;
    }
  }
  
  class AI extends Opponent {
    constructor(gameEngineInstance) {
      super(gameEngineInstance);
      this.pieceColour = null;
  
    }
  }
  // programming  to an interface that can be used by both the player and the opponent.
  class GameParticipant {
  
    constructor(username, colour, pieceColourCount){
      this.username = username;
      this.colour = colour;
      this.pieceColourCount = pieceColourCount;
    }
  
    setColour(colour) {
      this.colour = colour;
    }
  
    getColour() {
      return this.colour;
    } 
  
    switchTurn(){
      throw new Error("Not Implemented");
    }
  
    addPoints(points) {
      throw new Error("Not Implemented");
    }
  
  
  }
  
  // id like to make opponent and player classes.
  class PieceController {
    constructor(selectedPiece, boardInstance, gameEngineInstance) {
      this.selectedPiece = selectedPiece;
      this.boardInstance = boardInstance;
      this.gameEngineInstance = gameEngineInstance; // is this link right?
      this.rows = boardInstance.rows;
      this.columns = boardInstance.columns;
      this.matrix = boardInstance.matrix;
  
      this.mainMatrix = this.selectedPiece.style.backgroundColor === 'black' 
        ? this.boardInstance.getBlackPiecesMatrix() 
        : this.boardInstance.getWhitePiecesMatrix();
      this.operand = this.selectedPiece.style.backgroundColor === 'black' ? ">>" : "<<";
      // implement later - capturedpiece  
    }
  
  
    setInstanceMatrix() {
      this.matrix = this.boardInstance.matrix;
    }
  
  
    generateMove() {
      
      const row = parseInt(this.selectedPiece.getAttribute('data-row'));
      const col = parseInt(this.selectedPiece.getAttribute('data-col'));
      
      // Clear previous highlights before generating new moves
      this.unToggleHighlight();
      
      this.generateSingleMoves(row, col);
      console.log("Generating moves at", row,col)
    }
  
    unToggleHighlight() {
      document.querySelectorAll('.legalMove').forEach(cell => {
        cell.style.backgroundColor = "rgb(178, 152, 123)"
        cell.classList.remove('legalMove');
      });
    }
  
  
    matrixToBigInt(matrix) {
      const binaryString = matrix.flat().join('');
      const binaryBigInt = BigInt('0b' + binaryString);
      return binaryBigInt;
    }
  
    BigIntToMatrix(binaryBigInt) {
      const binaryString = binaryBigInt.toString(2).padStart(this.rows * this.columns, '0');
  
  
      const matrix = [];
      for (let i = 0; i < this.rows; i++) {
        const row = [];
        for (let j = 0; j < this.columns; j++) {
          row.push(Number(binaryString[i * this.columns + j]));
        }
        matrix.push(row);
      }
      return matrix;
    }
  
    getPieceAlone() {
      let emptyPieceArray = new Array(this.rows).fill(0).map(() => new Array(this.columns).fill(0));
      emptyPieceArray[parseInt(this.selectedPiece.getAttribute('data-row'))][parseInt(this.selectedPiece.getAttribute('data-col'))] = 1;
      return this.matrixToBigInt(emptyPieceArray);
    }
    generateSingleMoves(row, column) {
      let moves = [];
      const pieceBigInt = this.getPieceAlone();
      this.unToggleHighlight();
        // ROW 1, COLUMN  0 URGENT
      const directions = {
          left: BigInt((this.columns - column) + (column - 1)),
          right: BigInt((this.columns - column) + (column + 1)),
          jumpLeft: BigInt((this.columns - column) + (column-2) + ((this.columns ))),
          jumpRight: BigInt((this.columns - column) + (column+2) + ((this.columns))),
      };
  
      const potentialMoves = [];
      if (this.operand === ">>") {
        if (row >= 0 && column > 0) { 
            potentialMoves.push([pieceBigInt >> BigInt(directions.left), Object.keys(directions)[0]]);
        }
        if(column > 1){
          potentialMoves.push([pieceBigInt >> BigInt(directions.jumpLeft), Object.keys(directions)[2]]);
        }
        if (row < this.rows-1  && column < this.columns - 1 ) { 
          potentialMoves.push([pieceBigInt >> BigInt(directions.right), Object.keys(directions)[1]]);
        }
        if(row < this.rows - 1 && column < this.columns - 2  )
          potentialMoves.push([pieceBigInt >> BigInt(directions.jumpRight), Object.keys(directions)[3]]);
        }
  
        
    else { // white left and rights are reser
        if (row >0 && column >  1) { 
            potentialMoves.push([pieceBigInt << BigInt(directions.jumpRight), Object.keys(directions)[3]]);
        }
        if(row> 0 && column >0){
          potentialMoves.push([pieceBigInt << BigInt(directions.right), Object.keys(directions)[1]]);
        }
        if (row > 0 && column < this.columns - 1) { 
            potentialMoves.push([pieceBigInt << BigInt(directions.left), Object.keys(directions)[0]]);
        }
        if(row>0 &&   column >= 0 && column <  this.columns - 2){
            potentialMoves.push([pieceBigInt << BigInt(directions.jumpLeft), Object.keys(directions)[2]]);
        }
      
      }
  
    
  
      for (const [move,direction] of potentialMoves) {
          if (this.isMoveLegal(move, direction, directions, potentialMoves)) {
              
              moves.push([move, direction]);
          }
      }
  
    
  
      for (const [newPiecePosition, moveDirection] of moves) {
          const [newRow, newCol] = this.getCoordinatesFromBigInt(newPiecePosition);
          if (this.isWithinBounds(newRow, newCol) && this.matrix[newRow][newCol] === 0) {
  
              this.highlightMove(newRow, newCol, moveDirection);
          }
      }
  }
  
    isMoveLegal(binaryBigInt, direction, object, array) {
      this.setInstanceMatrix();
      const [oldRow, oldCol] = this.getCoordinatesFromBigInt(this.getPieceAlone());
      const [newRow, newCol] = this.getNewCoordinates(this.BigIntToMatrix(binaryBigInt));
      const opponentMatrix =this.selectedPiece.style.backgroundColor === 'black' ? this.boardInstance.getWhitePiecesMatrix() :this.boardInstance.getBlackPiecesMatrix() 
      
      // Ensure it's the correct player's turn
    
      
      
      if (direction.match(/jump*/)){
        let [midRow, midCol] = this.getMidCoordination(oldRow, newRow, oldCol, newCol);
        this.getMidCoordination(oldRow, newRow, oldCol, newCol)
  
        if( !this.isWithinBounds(newRow, newCol) || opponentMatrix[midRow][midCol] !== 1 ){
          return false;
        }console.log(opponentMatrix[midRow][midCol] )
      }
      
      // Check if the destination cell is within bounds and empty
      if (!this.isWithinBounds(newRow, newCol) || this.matrix[newRow][newCol] === 1) {
        return false;
      }
  
      return true;
    }
  
    getMidCoordination(oldRow, newRow, oldCol, newCol) {
      return [
        Math.floor((oldRow + newRow) / 2),
        Math.floor((oldCol + newCol) / 2)
      ];
    }
  
        
        // i think its a problem mwith how midrow and midcolumn is calculated
        
  
  
      
     
      
    getNewCoordinates(BigIntArray){
      let newRow, newCol;
      for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
              if (BigIntArray[i][j] === 1) {
                  newRow = i;
                  newCol = j;
                  break;
              }
          }
          if (newRow !== undefined) break;
      }
  
      return [newRow, newCol];
    }
  
    isWithinBounds(row, col) {
      return row >= 0 && row < this.rows && col >= 0 && col < this.columns;
  }
  
  
  
    highlightMove(newRow, newCol, moveDirection) {
      const cell = document.getElementById(`${newRow}${newCol}`);
      if (cell) {
          cell.classList.add('legalMove');
          cell.style.backgroundColor = (moveDirection.match(/jump*/)) ? "red" : "green";
          cell.addEventListener('click', (event) => this.movePiece(event, newRow, newCol, moveDirection), { once: true });
      }
  }
  
  
  async movePiece(event, newRow, newCol, moveDirection) { // async because we need to wait for the animation to finish
    const { selectedPiece } = this.boardInstance;
    
    if (!selectedPiece || selectedPiece !== this.selectedPiece) {
      return;
    }
  
  
    const oldRow = parseInt(this.selectedPiece.getAttribute('data-row'));
    const oldCol = parseInt(this.selectedPiece.getAttribute('data-col'));
    if(moveDirection.match(/jump*/)){
      let [midRow, midCol] = this.getMidCoordination(oldRow, newRow, oldCol, newCol);
      const midCell = document.getElementById(`${midRow}${midCol}`);
      const pieceAtMid = midCell.querySelector('.pieces');
      pieceAtMid.style.backgroundColor === 'black' ? this.gameEngineInstance.decrementBlackPieces() : this.gameEngineInstance.decrementWhitePieces();
      console.log("black pieces remaining", this.gameEngineInstance.blackPiecesLeft);
      console.log("white pieces remaining", this.gameEngineInstance.whitePiecesLeft);
  
    }
  
    
  
    
    if (this.matrix[newRow][newCol] !== 0) {
      return;
    }
  
    Promise.all([
      this.updateMatrixAsync(oldRow, oldCol, newRow, newCol, moveDirection),
      this.updateBoardAsync(oldRow, oldCol, newRow, newCol, moveDirection),
      this.gameEngineInstance.checkKing(document.getElementById(`${newRow}${newCol}`).querySelector('.pieces'))
    
  
      
    ]).then(() => {
      this.boardInstance.selectedPiece = null;
      this.unToggleHighlight();
      
    });
  }
  
  
  updateMatrix(oldRow, oldCol, newRow, newCol, moveDirection) {
    const color = this.selectedPiece.style.backgroundColor;
    
    // Get current matrices
    const blackMatrix = this.boardInstance.getBlackPiecesMatrix();
    const whiteMatrix = this.boardInstance.getWhitePiecesMatrix();
  
    if (moveDirection.match(/jump*/)) {
      let [midRow, midCol] = this.getMidCoordination(oldRow, newRow, oldCol, newCol);
      
      if (color === "black") {
        blackMatrix[oldRow][oldCol] = 0;
        whiteMatrix[midRow][midCol] = 0;
        blackMatrix[newRow][newCol] = 1;
        this.boardInstance.setBlackPiecesMatrix(blackMatrix);
        this.boardInstance.setWhitePiecesMatrix(whiteMatrix);
      } else {
        whiteMatrix[oldRow][oldCol] = 0;
        blackMatrix[midRow][midCol] = 0;
        whiteMatrix[newRow][newCol] = 1;
        this.boardInstance.setBlackPiecesMatrix(blackMatrix);
        this.boardInstance.setWhitePiecesMatrix(whiteMatrix);
      }
      
      // Update this.matrix
      this.matrix[oldRow][oldCol] = 0;
      this.matrix[midRow][midCol] = 0;
      this.matrix[newRow][newCol] = 1;
    } else {
      // Update the matrix based on the color of the piece
      if (color === 'black') {
        blackMatrix[oldRow][oldCol] = 0;
        blackMatrix[newRow][newCol] = 1;
        this.boardInstance.setBlackPiecesMatrix(blackMatrix);
      } else {
        whiteMatrix[oldRow][oldCol] = 0;
        whiteMatrix[newRow][newCol] = 1;
        this.boardInstance.setWhitePiecesMatrix(whiteMatrix);
      }
      
      // Update this.matrix
      this.matrix[oldRow][oldCol] = 0;
      this.matrix[newRow][newCol] = 1;
  
      
      
    }
  
  
  }
  
  updateMatrixAsync(oldRow, oldCol, newRow, newCol, moveDirection) {
    return new Promise(resolve => {
      this.updateMatrix(oldRow, oldCol, newRow, newCol, moveDirection);
      
      resolve();
    });
  }
  
  updateBoardAsync(oldRow, oldCol, newRow, newCol, moveDirection) {
    return new Promise(resolve => {
      this.updateBoard(oldRow, oldCol, newRow, newCol, moveDirection);
      resolve();
    });
  }
  
  
  updateBoard(oldRow, oldCol, newRow, newCol, moveDirection) {
    const oldCell = document.getElementById(`${oldRow}${oldCol}`);
    const newCell = document.getElementById(`${newRow}${newCol}`);
    let [midRow, midCol] = this.getMidCoordination(oldRow, newRow, oldCol, newCol);
    const midCell = document.getElementById(`${midRow}${midCol}`);
    
    if (moveDirection.match(/jump*/)) {
      if (midCell && midCell.childNodes.length > 0) {
        midCell.removeChild(midCell.childNodes[0]); // Ensure only the piece is removed
      }
    } 
    
    if (oldCell && oldCell.childNodes.length > 0) {
      oldCell.removeChild(oldCell.childNodes[0]);
    }
  
    if (newCell) {
      newCell.appendChild(this.selectedPiece);
  
  
    }
    
    this.selectedPiece.setAttribute('data-row', newRow);
    this.selectedPiece.setAttribute('data-col', newCol);
  
      
  }
  
  
      
    getCoordinatesFromBigInt(binaryBigInt) {
      const binaryString = binaryBigInt.toString(2).padStart(this.rows * this.columns, '0');
      let newRow, newCol;
  
      for (let i = 0; i < this.rows; i++) {
          for (let j = 0; j < this.columns; j++) {
              if (binaryString[i * this.columns + j] === '1') {
                  newRow = i;
                  newCol = j;
                  break;
              }
          }
          if (newRow !== undefined) break;
      }
  
      return [newRow, newCol];
    }
  
  }
  
  
  
  /*
  Move Up-Left: piece <<7n
  Move Up-Right: piece << 9n
  Move Down-Left: piece >> 7n
  Move Down-Right: piece >> 9n
  */ 
  const game = new Game();
  
